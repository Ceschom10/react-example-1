{"version":3,"sources":["components/NavBar.js","components/CourseItem.js","containers/MainList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","Typography","variant","color","CourseItem","course","Card","CardMedia","style","height","paddingTop","image","fields","file","url","title","CardContent","gutterBottom","component","description","CardActions","Button","size","href","target","client","contentful","space","accessToken","MainList","useState","courses","setCourses","searchString","setSearchString","fetchCourses","useCallback","getEntries","content_type","then","response","items","console","log","catch","err","error","useEffect","padding","TextField","paddingBottom","paddingLeft","paddingRight","placeholder","margin","onChange","e","value","InputProps","endAdornment","InputAdornment","Grid","container","spacing","map","item","xs","sm","lg","xl","key","slug","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2QAaeA,EAVA,kBACb,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,yC,0GCsBSC,EAzBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACjB,6BACGA,EACC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,EAAGC,WAAY,UAChCC,MAAON,EAAOO,OAAOD,MAAMC,OAAOC,KAAKC,IACvCC,MAAOV,EAAOO,OAAOG,QAEvB,kBAACC,EAAA,EAAD,KACE,kBAACf,EAAA,EAAD,CAAYgB,cAAY,EAACf,QAAQ,KAAKgB,UAAU,MAC7Cb,EAAOO,OAAOG,OAEjB,kBAACd,EAAA,EAAD,CAAYiB,UAAU,KAAKb,EAAOO,OAAOO,cAE3C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQnB,MAAM,YAAYoB,KAAMlB,EAAOO,OAAOE,IAAKU,OAAO,UAAvE,iBAKF,OCfFC,EAASC,IAAwB,CACrCC,MAJe,eAKfC,YAJmB,gDA6DNC,EAtDE,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACdC,EADc,KACLC,EADK,OAEmBF,mBAAS,IAF5B,mBAEdG,EAFc,KAEAC,EAFA,KAIfC,EAAeC,uBAAY,WAC/BX,EACGY,WAAW,CACVC,aAAc,SACd,sBAAuBL,IAExBM,MAAK,SAAAC,GACJR,EAAWQ,EAASC,OACpBC,QAAQC,IAAR,sCAA2CV,EAA3C,MAA6D,iCAAkCO,EAASC,UAEzGG,OAAM,SAAAC,GACLH,QAAQI,MAAMD,QAEjB,CAACZ,IAUJ,OAJAc,qBAAU,WACRZ,MACC,CAACF,EAAcE,IAGhB,yBAAK3B,MAAO,CAAEwC,QAAS,KACrB,kBAACC,EAAA,EAAD,CACEzC,MAAO,CAAEE,WAAY,GAAIwC,cAAe,GAAIC,YAAa,EAAGC,aAAc,GAC1EC,YAAY,oBACZC,OAAO,SACPC,SAdW,SAAAC,GACftB,EAAgBsB,EAAEhC,OAAOiC,OAAS,KAc9BC,WAAY,CACVC,aACE,kBAACC,EAAA,EAAD,CAAgB7D,SAAS,OACvB,kBAAC,IAAD,CAAYI,MAAM,gBAM1B,kBAAC0D,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIvD,MAAO,CAAEE,WAAY,GAAIwC,cAAe,GAAIC,YAAa,EAAGC,aAAc,IACpGrB,EAAQiC,KAAI,SAAA3D,GAAM,OACjB,kBAACwD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAKjE,EAAOO,OAAO2D,MACzD,kBAAC,EAAD,CAAYlE,OAAQA,WCjDjBmE,EAPH,kBACV,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAE,GACLJ,QAAQI,MAAMA,EAAM0C,a","file":"static/js/main.5c212da1.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nconst NavBar = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\">\n        ReactJs / Material-UI / Contentful\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport { Card, CardMedia, CardContent, Typography, CardActions, Button } from '@material-ui/core';\n\nconst CourseItem = ({ course }) => (\n  <div>\n    {course ? (\n      <Card>\n        <CardMedia\n          style={{ height: 0, paddingTop: '56.25%' }}\n          image={course.fields.image.fields.file.url}\n          title={course.fields.title}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {course.fields.title}\n          </Typography>\n          <Typography component=\"p\">{course.fields.description}</Typography>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" color=\"secondary\" href={course.fields.url} target=\"_blank\">\n            Open course\n          </Button>\n        </CardActions>\n      </Card>\n    ) : null}\n  </div>\n);\n\nexport default CourseItem;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { TextField, Grid, InputAdornment } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport * as contentful from 'contentful';\nimport CourseItem from '../components/CourseItem';\n\nconst SPACE_ID = 'srlpekq85luo';\nconst ACCESS_TOKEN = 'evMFF1eK--2PX6Qqrlq8glrKOurVH1pdvaI-FRgmufU';\n\nconst client = contentful.createClient({\n  space: SPACE_ID,\n  accessToken: ACCESS_TOKEN,\n});\n\nconst MainList = () => {\n  const [courses, setCourses] = useState([]);\n  const [searchString, setSearchString] = useState('');\n\n  const fetchCourses = useCallback(() => {\n    client\n      .getEntries({\n        content_type: 'course',\n        'fields.title[match]': searchString,\n      })\n      .then(response => {\n        setCourses(response.items);\n        console.log(`%ccourses fetched using... \"${searchString}\":`, 'background: #ccc; color: #444;', response.items);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }, [searchString]);\n\n  const onChange = e => {\n    setSearchString(e.target.value || '');\n  };\n\n  useEffect(() => {\n    fetchCourses();\n  }, [searchString, fetchCourses]);\n\n  return (\n    <div style={{ padding: 40 }}>\n      <TextField\n        style={{ paddingTop: 24, paddingBottom: 24, paddingLeft: 0, paddingRight: 0 }}\n        placeholder=\"Search courses...\"\n        margin=\"normal\"\n        onChange={onChange}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <SearchIcon color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <Grid container spacing={10} style={{ paddingTop: 24, paddingBottom: 24, paddingLeft: 0, paddingRight: 0 }}>\n        {courses.map(course => (\n          <Grid item xs={12} sm={6} lg={4} xl={3} key={course.fields.slug}>\n            <CourseItem course={course} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default MainList;\n","import React from 'react';\nimport NavBar from './components/NavBar';\nimport MainList from './containers/MainList';\n\nconst App = () => (\n  <>\n    <NavBar />\n    <MainList />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}